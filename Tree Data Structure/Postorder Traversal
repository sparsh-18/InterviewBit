/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode A) {
        Stack<TreeNode> st = new Stack<>();
        if(A!=null){st.push(A);
        A=A.left;}
        ArrayList<Integer> ans = new ArrayList<>();

        while(!st.isEmpty()) {
           // System.out.println("h");
            if(A!=null) {
                st.push(A);
                A=A.left;
            } else {
                TreeNode tr = st.peek().right;
                if(tr==null) {
                    TreeNode t = st.peek();
                    ans.add(t.val);
                    st.pop();
                    while(!st.isEmpty() && t==st.peek().right) {
                        t=st.peek();
                        ans.add(t.val);
                        st.pop();
                    }
                }
                else A=tr;
            }
        }
       // System.out.println(ans.size());
        return ans;

    }
}
